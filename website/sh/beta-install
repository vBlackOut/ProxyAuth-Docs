#!/bin/bash

set -e
sudo -i
echo "[*] Detecting Linux distribution..."

# Detect distro
if [ -f /etc/alpine-release ]; then
    DISTRO="alpine"
elif [ -f /etc/debian_version ]; then
    DISTRO="debian"
elif [ -f /etc/arch-release ]; then
    DISTRO="arch"
elif [ -f /etc/redhat-release ]; then
    DISTRO="fedora"
else
    echo "[!] Unsupported Linux distribution."
    exit 1
fi

echo "[*] Detected distribution: $DISTRO"
echo "[*] Installing dependencies..."

case "$DISTRO" in
    alpine)
        sudo apk add --no-cache openssl openssl-libs-static openssl-dev musl-dev build-base pkgconf alpine-sdk sudo curl
        ;;
    debian)
        sudo apt update
        sudo apt install -y openssl libssl-dev build-essential pkgconf sudo curl
        ;;
    arch)
        sudo pacman -Sy --noconfirm openssl base-devel pkgconf sudo curl
        ;;
    fedora)
        sudo dnf install -y openssl openssl-devel gcc make pkgconf sudo curl
        ;;
esac

# Install Rust if not found
if ! command -v cargo &> /dev/null; then
    echo "[*] cargo not found, installing Rust via rustup..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sudo sh -s -- -y
    source "$HOME/.cargo/env"
else
    echo "[*] cargo is already installed."
fi

# download url proxyauth
echo "[*] Downloading ProxyAuth..."
URL="https://crates.proxyauth.app/downloads/latest-beta/proxyauth"
out_dir="/tmp"

# give real name in header
filename=$(curl -fsSL -OJ -w '%{filename_effective}' "$URL") || {
    echo "Error download beta version from $URL"
    exit 1
}

# move inside the tmp file
mv "$filename" "$out_dir/"

echo "[*] Checking hash file $filename..."
if ! curl -fsSL  https://crates.proxyauth.app/downloads/latest-beta/proxyauth/hash | (cd /tmp && sha256sum -c -); then
    echo "[*] Error Checksum ProxyAuth failed"
    rm -f "/tmp/$filename"
    exit 1
fi

echo "[*] Extracting crate..."
mkdir -p /tmp/proxyauth_install
tar -xf /tmp/$filename -C /tmp/proxyauth_install

echo "[*] Installing proxyauth... using cargo..."
cargo install --path /tmp/proxyauth_install/*/ --root /usr/local -j $(($(nproc) - 2)) --force --no-track --locked

# Ensure /usr/local/bin/proxyauth is executable
sudo chmod +x /usr/local/bin/proxyauth

echo "[*] Running 'proxyauth prepare'..."
sudo /usr/local/bin/proxyauth prepare

echo "[*] Clean build directory"
rm -rf /tmp/proxyauth_install

# prepare certs directory
echo "[*] prepare certificats directory"
sudo mkdir -p /etc/proxyauth/certs
sudo mkdir -p /etc/proxyauth/certs/routes
sudo openssl req -x509 -newkey rsa:2048 -sha256 -days 30 \
    -nodes \
    -keyout /etc/proxyauth/certs/key.pem \
    -out /etc/proxyauth/certs/cert.pem \
    -subj "/CN=localhost"
sudo chown proxyauth:proxyauth -R /etc/proxyauth/

# Check for systemd
if pidof systemd > /dev/null; then
    echo "[*] systemd detected. Setting up proxyauth.service..."

    sudo bash -c 'cat > /etc/systemd/system/proxyauth.service' << 'EOF'
[Unit]
Description=ProxyAuth Service
After=network.target

[Service]
Type=simple
LimitNOFILE=1048576
User=proxyauth
Group=proxyauth
ExecStart=/usr/local/bin/proxyauth
Restart=on-failure
RestartSec=5
Environment=RUST_LOG=info

[Install]
WantedBy=multi-user.target
EOF

    echo "[*] Reloading systemd daemon and enabling service..."
    sudo systemctl daemon-reload
    sudo systemctl enable proxyauth
    sudo systemctl restart proxyauth

    echo "[*] proxyauth.service installed and running!"
else
    echo "[!] Warning: systemd not detected. Manual service setup required."
fi

echo "[*] proxyauth setup complete."
